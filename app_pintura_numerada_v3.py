        with st.spinner('Processando imagem... Por favor, aguarde.'):
            pil_image_rgb = pil_image.convert('RGB')
            src_np_rgb = np.array(pil_image_rgb) 
            canvas_obj = Canvas(src_np_rgb, nb_color_slider, target_dimension_slider)
            result_paint_screen, colors_palette_norm_rgb, segmented_image_uint8_rgb = canvas_obj.generate()
        
        with col2_proc:
            st.subheader("üé® Imagem Segmentada")
            st.image(segmented_image_uint8_rgb, caption='Cores Quantizadas', use_container_width=True)
            _, segmented_buffer = cv2.imencode('.png', cv2.cvtColor(segmented_image_uint8_rgb, cv2.COLOR_RGB2BGR))
            st.download_button(label="üì• Baixar Segmentada (.png)", data=segmented_buffer.tobytes(), file_name=f'segmentada_{uploaded_file.name}.png', mime='image/png', key="download_segmented")
            st.write("---")
            st.subheader("üñåÔ∏è Tela para Pintar")
            st.image(result_paint_screen, caption='Numerada para Pintar', use_container_width=True)
            _, result_buffer = cv2.imencode('.png', result_paint_screen)
            st.download_button(label="üì• Baixar Tela para Pintar (.png)", data=result_buffer.tobytes(), file_name=f'tela_pintar_{uploaded_file.name}.png', mime='image/png', key="download_paint_screen")
        
        st.write("---")
        st.subheader("üåà Paleta de Cores Gerada e An√°lise")
        if not isinstance(colors_palette_norm_rgb, np.ndarray) or colors_palette_norm_rgb.shape[0] == 0:
            st.warning("Nenhuma paleta de cores foi gerada. Tente com outra imagem ou configura√ß√µes.")
        else:
            cor_representativa_norm_rgb = colors_palette_norm_rgb[0]
            cor_jung_representativa = buscar_cor_proxima(cor_representativa_norm_rgb, cores_junguianas)
            if cor_jung_representativa and cor_jung_representativa['cor'] != 'N/A':
                with st.expander(f"üí° An√°lise Junguiana da Cor Representativa da Paleta: {cor_jung_representativa['cor']}"):
                    st.write(f"**Anima/Animus:** {cor_jung_representativa['anima_animus']}")
                    st.write(f"**Sombra:** {cor_jung_representativa['sombra']}")
                    st.write(f"**Personalidade:** {cor_jung_representativa['personalidade']}")
                    st.write(f"**Diagn√≥stico:** {cor_jung_representativa['diagnostico']}")
                    if 'referencias' in cor_jung_representativa and cor_jung_representativa['referencias']:
                        st.markdown("**Pistas para Estudo:**"); st.caption(cor_jung_representativa['referencias'])
            else: st.caption("An√°lise Junguiana para a cor representativa n√£o dispon√≠vel.")
            
            st.markdown("### Detalhes das Cores da Paleta:")
            for i, color_norm_rgb_item in enumerate(colors_palette_norm_rgb):
                color_uint8_rgb_item = [int(c * 255) for c in color_norm_rgb_item]
                st.markdown(f"---") 
                col_img, col_info = st.columns([1, 3])
                with col_img:
                    st.markdown(f"##### Cor {i+1}")
                    color_block_display = np.full((80, 80, 3), color_uint8_rgb_item, dtype=np.uint8)
                    st.image(color_block_display, caption=f"RGB: {tuple(color_uint8_rgb_item)}", width=80)
                with col_info:
                    r_norm, g_norm, b_norm = color_norm_rgb_item[0], color_norm_rgb_item[1], color_norm_rgb_item[2]
                    c_ml, m_ml, y_ml, k_ml, white_ml = calculate_ml_with_white(r_norm, g_norm, b_norm, total_ml_slider)
                    st.markdown(f"**Dosagem para {total_ml_slider}ml (incl. Branco):**")
                    st.markdown(f"- Ciano (C): {c_ml:.1f} ml\n- Magenta (M): {m_ml:.1f} ml\n- Amarelo (Y): {y_ml:.1f} ml\n- Preto (K): {k_ml:.1f} ml\n- **Branco (W): {white_ml:.1f} ml**")
                    cor_jung_especifica =diagnostico': 'Pode indicar necessidade de introspec√ß√£o, busca por verdade e calma, ou um per√≠odo de tristeza e isolamento.',
    'referencias': 'Conceitos: Fun√ß√£o Pensamento Introvertido, Logos, Arqu√©tipo do S√°bio. Obras relevantes: JUNG, C. G. *Tipos psicol√≥gicos*.'
},
'5': {
    'cor': 'Verde (Esmeralda)',
    'rgb': (80, 200, 120),
    'anima_animus': 'Natureza, crescimento, cura, fertilidade, esperan√ßa, sentimento (Eros conectado √† natureza), renova√ß√£o.',
    'sombra': 'Inveja, ci√∫me, imaturidade, estagna√ß√£o, possessividade, engano (como a serpente no jardim).',
    'personalidade': 'Equilibrada, harmoniosa, compassiva, generosa, pr√°tica, conectada com o crescimento.',
    'diagnostico': 'Pode indicar necessidade de renova√ß√£o, contato com a natureza, cura f√≠sica ou emocional, ou quest√µes de crescimento pessoal e inveja.',
    'referencias': 'Conceitos: Simbolismo da Natureza, Fun√ß√£o Sentimento, Arqu√©tipo da Grande M√£e. Obras relevantes: FRANZ, M.-L. von (obras sobre contos de fadas).'
},
'6': {
    'cor': 'Amarelo (Lim√£o)',
    'rgb': (255, 247, 0),
    'anima_animus': 'Intelecto, intui√ß√£o (como insight s√∫bito), otimismo, alegria, extrovers√£o, inspira√ß√£o, clareza mental.',
    'sombra': 'Covardia, superficialidade, trai√ß√£o (como Judas), ansiedade, cr√≠tica excessiva, racionaliza√ß√£o excessiva.',
    'personalidade': 'Comunicativa, alegre, curiosa, criativa, espont√¢nea, pode ser vol√°til.',
    'diagnostico': 'Pode indicar necessidade de clareza mental, express√£o de alegria e otimismo, ou sobrecarga de est√≠mulos e ansiedade.',
    'referencias': 'Conceitos: Fun√ß√£o Intui√ß√£o Extrovertida, Simbolismo Solar, Citrinitas (Alquimia). Obras relevantes: JUNG, C. G. *Tipos psicol√≥gicos*; JUNG, C. G. *Psicologia e alquimia*.'
},
'7': {
    'cor': 'Laranja',
    'rgb': (255, 165, 0),
    'anima_animus': 'Criatividade, entusiasmo, alegria social, vitalidade extrovertida, prazer sensorial, aventura.',
    'sombra': 'Superficialidade, depend√™ncia de aprova√ß√£o, excesso de indulg√™ncia, falta de seriedade, exibicionismo.',
    'personalidade': 'Otimista, soci√°vel, aventureiro, en√©rgico, busca prazer e intera√ß√£o.',
    'diagnostico': 'Pode indicar necessidade de express√£o criativa, socializa√ß√£o, busca por prazer e alegria, ou uma fase de transi√ß√£o e explora√ß√£o.',
    'referencias': 'Conceitos: Fun√ß√£o Sensa√ß√£o Extrovertida, Vitalidade. Obras relevantes: JUNG, C. G. *Tipos psicol√≥gicos*.'
},
'8': {
    'cor': 'Roxo/Violeta',
    'rgb': (128, 0, 128),
    'anima_animus': 'Espiritualidade elevada, intui√ß√£o, transforma√ß√£o, nobreza, conex√£o com o inconsciente profundo e o mist√©rio.',
    'sombra': 'Luto n√£o resolvido, melancolia, arrog√¢ncia espiritual, escapismo, irrealismo, autopuni√ß√£o.',
    'personalidade': 'Intuitiva, art√≠stica, sens√≠vel, misteriosa, busca significado e prop√≥sito, pode ser um tanto isolada.',
    'diagnostico': 'Pode indicar um per√≠odo de introspec√ß√£o profunda, busca espiritual, necessidade de integrar experi√™ncias transformadoras, ou luto.',
    'referencias': 'Conceitos: Transforma√ß√£o, Espiritualidade, Mist√©rio. Obras relevantes: JUNG, C. G. *Psicologia e alquimia*.'
},
'9': {
    'cor': 'Rosa (Claro)',
    'rgb': (255, 182, 193),
    'anima_animus': 'Amor incondicional, compaix√£o, cuidado, ternura, receptividade, inoc√™ncia, o feminino jovem.',
    'sombra': 'Imaturidade emocional, fragilidade excessiva, sentimentalismo, necessidade de resgate, ingenuidade perigosa.',
    'personalidade': 'Gentil, afetuosa, carinhosa, emp√°tica, pode ser idealista e um pouco ing√™nua.',
    'diagnostico': 'Pode indicar necessidade de amor pr√≥prio e cuidado, cura emocional, ou o desenvolvimento de qualidades mais suaves e receptivas.',
    'referencias': 'Conceitos: Anima (aspecto jovem), Fun√ß√£o Sentimento, Compaix√£o.'
},
'10': {
    'cor': 'Marrom (Terra)',
    'rgb': (139, 69, 19),
    'anima_animus': 'Conex√£o com a terra, estabilidade, seguran√ßa, simplicidade, ra√≠zes, o corpo f√≠sico, praticidade.',
    'sombra': 'Estagna√ß√£o, teimosia, materialismo excessivo, falta de aspira√ß√£o, peso, sujeira (no sentido de n√£o elaborado).',
    'personalidade': 'Pr√°tica, confi√°vel, s√≥lida, aprecia o conforto e a tradi√ß√£o, p√©s no ch√£o.',
    'diagnostico': 'Pode indicar necessidade de aterramento (grounding), seguran√ßa material, ou uma fase de consolida√ß√£o e praticidade, ou estagna√ß√£o.',
    'referencias': 'Conceitos: Fun√ß√£o Sensa√ß√£o Introvertida, Aspecto Ct√¥nico. Obras relevantes: JUNG, C. G. *Tipos psicol√≥gicos*.'
},
'11': {
    'cor': 'Cinza (M√©dio)',
    'rgb': (128, 128, 128),
    'anima_animus': 'Neutralidade, equil√≠brio, objetividade, maturidade, conten√ß√£o, o "entre-mundos".',
    'sombra': 'Indiferen√ßa, falta de compromisso, depress√£o, medo da vida, repress√£o emocional, estagna√ß√£o, falta de cor.',
    'personalidade': 'Reservada, anal√≠tica, prudente, pode ser indecisa ou imparcial, busca modera√ß√£o.',
    'diagnostico': 'Pode indicar um per√≠odo de transi√ß√£o, necessidade de distanciamento para avalia√ß√£o, um estado de exaust√£o emocional, ou depress√£o.',
    'referencias': 'Conceitos: Neutralidade, Transi√ß√£o, Conjun√ß√£o dos Opostos (n√£o diferenciada).'
},
'12': {
    'cor': 'Dourado',
    'rgb': (255, 215, 0),
    'anima_animus': 'Ilumina√ß√£o, sabedoria, o Self realizado, valor, prosperidade, poder espiritual, o Sol.',
    'sombra': 'Ostenta√ß√£o, materialismo, ego inflado (infla√ß√£o ps√≠quica), corrup√ß√£o pelo poder, falsidade, gan√¢ncia.',
    'personalidade': 'Carism√°tica, confiante, generosa, busca excel√™ncia e reconhecimento, magn√¢nima.',
    'diagnostico': 'Pode indicar um per√≠odo de grande realiza√ß√£o e autoconfian√ßa, ou a necessidade de reconhecer o pr√≥prio valor e brilho; cuidado com a infla√ß√£o.',
    'referencias': 'Conceitos: Self, Simbolismo Solar, Ouro Alqu√≠mico. Obras relevantes: JUNG, C. G. *Psicologia e alquimia*; JUNG, C. G. *Mysterium coniunctionis*.'
},
'13': {
    'cor': 'Prateado',
    'rgb': (192, 192, 192),
    'anima_animus': 'Intui√ß√£o, reflex√£o, o feminino arquet√≠pico (Lua), clareza mental sutil, modernidade, valor intr√≠nseco.',
    'sombra': 'Frieza, distanciamento emocional, ilus√£o, indecis√£o, superficialidade elegante, inconst√¢ncia.',
    'personalidade': 'Intuitiva, elegante, sofisticada, busca harmonia e paz interior, pode ser adapt√°vel.',
    'diagnostico': 'Pode indicar necessidade de introspec√ß√£o, conex√£o com a intui√ß√£o e o feminino, ou um per√≠odo de purifica√ß√£o e clareza.',
    'referencias': 'Conceitos: Anima, Simbolismo Lunar, Inconsciente, Intui√ß√£o.'
},
'14': {
    'cor': 'Turquesa/Ciano',
    'rgb': (64, 224, 208),
    'anima_animus': 'Cura emocional, comunica√ß√£o clara (especialmente do cora√ß√£o), prote√ß√£o, individualidade, tranquilidade expressiva.',
    'sombra': 'Dificuldade em expressar sentimentos, isolamento autoimposto, frieza defensiva, superficialidade na comunica√ß√£o.',
    'personalidade': 'Calma, comunicativa, criativa, independente, busca clareza e express√£o aut√™ntica, curativa.',
    'diagnostico': 'Pode indicar necessidade de cura emocional, melhoria na comunica√ß√£o (falar a sua verdade), ou fortalecimento da individualidade e autoconfian√ßa.',
    'referencias': 'Conceitos: Comunica√ß√£o, Cura Emocional. Interse√ß√£o simb√≥lica de Azul e Verde.'
},
'15': {
    'cor': 'Magenta',
    'rgb': (255, 0, 255),
    'anima_animus': 'Espiritualidade pr√°tica, harmonia universal, compaix√£o n√£o sentimental, transforma√ß√£o interior, gratid√£o.',
    'sombra': 'Excentricidade, n√£o praticidade, sentimento de superioridade espiritual, desequil√≠brio emocional.',
    'personalidade': 'Inovadora, art√≠stica, compassiva, busca equil√≠brio entre o espiritual e o material, inconformista.',
    'diagnostico': 'Pode indicar um per√≠odo de grande insight espiritual, necessidade de alinhar a√ß√µes com valores elevados, ou de expressar compaix√£o de forma ativa.',
    'referencias': 'Conceitos: Uni√£o dos Opostos (simb√≥lica), Espiritualidade Integrada.'
},
'16': {
    'cor': '√çndigo',
    'rgb': (75, 0, 130),
    'anima_animus': 'Intui√ß√£o profunda (terceiro olho), sabedoria interior, percep√ß√£o al√©m do comum, autoridade espiritual, integridade.',
    'sombra': 'Medo do desconhecido, fanatismo, isolamento por se sentir incompreendido, depress√£o por excesso de percep√ß√£o, dogmatismo.',
    'personalidade': 'Introspectiva, s√°bia, perceptiva, busca conhecimento profundo e verdade, pode ser vista como "diferente".',
    'diagnostico': 'Pode indicar uma forte conex√£o com o inconsciente, necessidade de confiar na intui√ß√£o, ou um per√≠odo de busca por respostas existenciais e integridade.',
    'referencias': 'Conceitos: Fun√ß√£o Intui√ß√£o Introvertida, Sabedoria Interior. Obras relevantes: JUNG, C. G. *Tipos psicol√≥gicos*.'
},
'17': {
    'cor': 'Verde Oliva',
    'rgb': (128, 128, 0),
    'anima_animus': 'Paz, sabedoria pr√°tica, conex√£o com a natureza de forma madura, esperan√ßa resiliente, estrat√©gia.',
    'sombra': 'Amargura, ressentimento, engano, estagna√ß√£o disfar√ßada de paz, covardia.',
    'personalidade': 'Diplom√°tica, observadora, perspicaz, valoriza a harmonia e a estrat√©gia, resiliente.',
    'diagnostico': 'Pode indicar necessidade de resolu√ß√£o de conflitos (internos ou externos), busca por paz interior duradoura, ou aplica√ß√£o da sabedoria de forma pr√°tica.',
    'referencias': 'Conceitos: Sabedoria Terrena, Paz. Interse√ß√£o simb√≥lica de Verde e Amarelo/Marrom.'
},
'18': {
    'cor': 'Verde Lim√£o (Chartreuse)',
    'rgb': (127, 255, 0),
    'anima_animus': 'Juventude, vigor, otimismo efervescente, clareza mental e emocional, novidade, espontaneidade.',
    'sombra': 'Imaturidade, inveja aguda, acidez, irritabilidade, ansiedade por novidade.',
    'personalidade': 'Energ√©tica, alegre, comunicativa, pode ser um pouco impulsiva ou superficial, inovadora.',
    'diagnostico': 'Pode indicar necessidade de renova√ß√£o, leveza, ou um alerta para n√£o ser excessivamente cr√≠tico, invejoso ou ansioso por constante mudan√ßa.',
    'referencias': 'Conceitos: Energia Jovem, Novidade. Interse√ß√£o simb√≥lica de Verde e Amarelo.'
},
'19': {
    'cor': 'Azul Celeste/Claro',
    'rgb': (173, 216, 230),
    'anima_animus': 'Paz, tranquilidade, serenidade, comunica√ß√£o suave, esperan√ßa e prote√ß√£o espiritual, o c√©u.',
    'sombra': 'Passividade, ingenuidade, frieza distante, dificuldade em impor limites, tristeza suave.',
    'personalidade': 'Calma, sonhadora, idealista, busca harmonia e entendimento, gentil.',
    'diagnostico': 'Pode indicar necessidade de paz interior, relaxamento, ou desenvolvimento de uma comunica√ß√£o mais assertiva e suave, ou um toque de melancolia.',
    'referencias': 'Conceitos: Tranquilidade, Espiritualidade Serena. Simbolismo do C√©u.'
},
'20': {
    'cor': 'Azul Marinho',
    'rgb': (0, 0, buscar_cor_proxima(color_norm_rgb_item, cores_junguianas)
                    if cor_jung_especifica and cor_jung_especifica['cor'] != 'N/A':
                        with st.expander(f"An√°lise Junguiana: {cor_jung_especifica['cor']}", expanded=False):
                            st.write(f"**Anima/Animus:** {cor_jung_especifica['anima_animus']}")
                            st.write(f"**Sombra:** {cor_jung_especifica['sombra']}")
                            st.write(f"**Personalidade:** {cor_jung_especifica['personalidade']}")
                            st.write(f"**Diagn√≥stico:** {cor_jung_especifica['diagnostico']}")
                            if 'referencias' in cor_jung_especifica and cor_jung_especifica['referencias']:
                                st.markdown("**Pistas para Estudo:**"); st.caption(cor_jung_especifica['referencias'])
                    else: st.caption("(An√°lise Junguiana n√£o dispon√≠vel para esta cor)")
            st.markdown(f"---")

            st.subheader("üñºÔ∏è Camadas de Cores para Pintura (PNG)")
            st.caption("Cada imagem abaixo representa uma camada de cor. As √°reas coloridas devem ser pintadas com a cor correspondente da paleta.")
            if isinstance(colors_palette_norm_rgb, np.ndarray) and colors_palette_norm_rgb.shape[0] > 0:
                altura, largura, _ = segmented_image_uint8_rgb.shape 
                for i, color_norm_rgb_item in enumerate(colors_palette_norm_rgb):
                    cor_atual_uint8_rgb = np.array([int(c * 255) for c in color_norm_rgb_item], dtype=np.uint8)
                    st.markdown(f"#### Camada para Cor {i+1}")
                    mask_cor_atual = cv2.inRange(segmented_image_uint8_rgb, cor_atual_uint8_rgb, cor_atual_uint8_rgb)
                    camada_imagem_rgb = np.full((altura, largura, 3), 255, dtype=np.uint8) 
                    camada_imagem_rgb[mask_cor_atual > 0] = cor_atual_uint8_rgb
                    col_camada_img, col_camada_info = st.columns([2,1])
                    with col_camada_img: st.image(camada_imagem_rgb, use_container_width=True, caption=f"√Åreas para pintar com a Cor {i+1} (RGB: {tuple(cor_atual_uint8_rgb)})")
                    camada_imagem_bgr = cv2.cvtColor(camada_imagem_rgb, cv2.COLOR_RGB2BGR)
                    _, camada_buffer = cv2.imencode('.png', camada_imagem_bgr)
                    with col_camada_info:
                        st.download_button(label=f"üì• Baixar Camada Cor {i+1}", data=camada_buffer.tobytes(), file_name=f'camada_cor_{i+1}_{uploaded_file.name}.png', mime='image/png', key=f"download_camada_{i}")
                        st.markdown("**Cor de Refer√™ncia:**")
                        color_block_ref = np.full((50, 50, 3), cor_atual_uint8_rgb, dtype=np.uint8)
                        st.image(color_block_ref, width=50)
                    st.markdown("---") 
            else: st.info("Paleta de cores n√£o dispon√≠vel para gerar camadas.")

            # --- Gera√ß√£o de PDF Simplificado ---
            st.write("---")
            st.subheader("üìÑ Op√ß√µes de Relat√≥rio")
            # Adicionado um id ao bot√£o para poder escond√™-lo na impress√£o via CSS
            st.markdown('<div id="generate-pdf-button">', unsafe_allow_html=True)
            if st.button("Gerar Relat√≥rio PDF Simplificado", key="generate_pdf_button_click", help="Gera um PDF com os principais resultados textuais e imagens."):
                with st.spinner("Gerando PDF..."):
                    pdf = FPDF()
                    pdf.add_page()
                    pdf.set_auto_page_break(auto=True, margin=15)
                    
                    # Tentar adicionar fonte DejaVu para melhor suporte a Unicode
                    try:
                        # Certifique-se que 'DejaVuSansCondensed.ttf' est√° na mesma pasta do script
                        # ou forne√ßa o caminho completo.
                        pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
                        pdf.set_font("DejaVu", size=12)
                    except RuntimeError:
                        st.warning("Fonte DejaVu (DejaVuSansCondensed.ttf) n√£o encontrada. Usando Arial (pode haver problemas com caracteres especiais). Certifique-se de que o arquivo .ttf est√° na pasta do script.")
                        pdf.set_font("Arial", size=12)

                    pdf.set_font_size(16) # Usar set_font_size para mudar o tamanho
                    pdf.cell(0, 10, "Relat√≥rio de An√°lise de Imagem e Cores", 0, 1, "C")
                    pdf.ln(5)

                    pdf.set_font_size(12)
                    pdf.cell(0, 10, f"Arquivo Original: {uploaded_file.name}", 0, 1)
                    pdf.ln(5)
                    
                    # Fun√ß√£o auxiliar para adicionar imagem ao PDF
                    def add_image_to_pdf(pdf_obj, image_pil_or_cv, title, temp_filename_base, is_cv_img=False):
                        pdf_obj.set_font_size(12) # Resetar tamanho da fonte para o t√≠tulo da imagem
                        pdf_obj.cell(0, 10, title, 0, 1)
                        try:
                            temp_path = f"{temp_filename_base}.png"
                            if is_cv_img: # Se for uma imagem OpenCV (NumPy array)
                                if len(image_pil_or_cv.shape) == 2: # Grayscale
                                    cv2.imwrite(temp_path, image_pil_or_cv)
                                    img_pil = Image.open(temp_path) # Reabre como PIL para pegar dimens√µes
                                else: # Color (RGB passado, converter para BGR para OpenCV)
                                    cv2.imwrite(temp_path, cv2.cvtColor(image_pil_or_cv, cv2.COLOR_RGB2BGR))
                                    img_pil = Image.open(temp_path)
                            else: # √â uma imagem PIL
                                image_pil_or_cv.save(temp_path)
                                img_pil = image_pil_or_cv

                            img_w, img_h = img_pil.size
                            ratio = img_h / img_w if img_w > 0 else 1
                            display_w = min(180, pdf_obj.w - 2 * pdf_obj.l_margin) 
                            display_h = display_w * ratio
                            max_h = 70 
                            if display_h > max_h:
                                display_h = max_h
                                display_w = display_h / ratio if ratio > 0 else display_h
                            
                            current_x = pdf_obj.get_x()
                            current_y = pdf_obj.get_y()
                            if current_y + display_h > pdf_obj.page_break_trigger: 
                                pdf_obj.add_page()
                                current_y = pdf_obj.get_y() # Pega o novo Y ap√≥s quebra de p√°gina

                            if display_w > 0 and display_h > 0:
                                pdf_obj.image(temp_path, x=current_x, y=current_y, w=display_w, h=display_h)
                                pdf_obj.ln(display_h + 5) 
                            else:
                                pdf_obj.cell(0,10, f"Dimens√µes inv√°lidas para imagem '{title}'.",0,1)

                            os.remove(temp_path)
                        except Exception as e_img:
                            pdf_obj.set_font_size(10)
                            pdf_obj.multi_cell(0, 5, f"Erro ao adicionar imagem '{title}': {str(e_img)}", 0, 1)
                            pdf_obj.ln(5)

                    add_image_to_pdf(pdf, pil_image, "Imagem Original:", "temp_original_pdf")
                    add_image_to_pdf(pdf, segmented_image_uint8_rgb, "Imagem Segmentada:", "temp_segmented_pdf", is_cv_img=True)
                    add_image_to_pdf(pdf, result_paint_screen, "Tela para Pintar:", "temp_paint_screen_pdf", is_cv_img=True)

                    pdf.set_font_size(14); pdf.cell(0, 10, "An√°lise da Cor Representativa da Paleta", 0, 1); pdf.set_font_size(10)
                    if cor_jung_representativa and cor_jung_representativa['cor'] != 'N/A':
                        text_content = (
                            f"Cor: {cor_jung_representativa['cor']}\n"
                            f"Anima/Animus: {cor_jung_representativa['anima_animus']}\n"
                            f"Sombra: {cor_jung_representativa['sombra']}\n"
                            f"Personalidade: {cor_jung_representativa['personalidade']}\n"
                            f"Diagn√≥stico: {cor_jung_representativa['diagnostico']}\n"
                            f"Pistas para Estudo: {cor_jung_representativa.get('referencias', '')}"
                        )
                        pdf.multi_cell(0, 5, text_content)
                    pdf.ln(5)

                    pdf.set_font_size(14); pdf.cell(0, 10, "Detalhes das Cores da Paleta", 0, 1)
                    for i, color_norm_rgb_item in enumerate(colors_palette_norm_rgb):
                        pdf.set_font_size(11); pdf.cell(0, 7, f"Cor {i+1}", 0, 1); pdf.set_font_size(9) # Reduzido para caber mais
                        r_norm, g_norm, b_norm = color_norm_rgb_item[0], color_norm_rgb_item[1], color_norm_rgb_item[2]
                        c_ml, m_ml, y_ml, k_ml, white_ml = calculate_ml_with_white(r_norm, g_norm, b_norm, total_ml_slider)
                        
                        text_palette_detail = (
                            f"RGB: ({int(r_norm*255)}, {int(g_norm*255)}, {int(b_norm*255)})\n"
                            f"Dosagem para {total_ml_slider}ml (incl. Branco):\n"
                            f"  Ciano (C): {c_ml:.1f} ml, Magenta (M): {m_ml:.1f} ml, Amarelo (Y): {y_ml:.1f} ml, Preto (K): {k_ml:.1f} ml, Branco (W): {white_ml:.1f} ml"
                        )
                        pdf.multi_cell(0, 5, text_palette_detail)

                        cor_jung_especifica = buscar_cor_proxima(color_norm_rgb_item, cores_junguianas)
                        if cor_jung_especifica and cor_jung_especifica['cor'] != 'N/A':
                             text_jung_detail = (
                                 f"An√°lise Junguiana ({cor_jung_especifica['cor']}):\n"
                                 f"  Anima/Animus: {cor_jung_especifica['anima_animus']}\n"
                                 f"  Sombra: {cor_jung_especifica['sombra']}\n"
                                 f"  Personalidade: {cor_jung_especifica['personalidade']}\n" 
                                 f"  Diagn√≥stico: {cor_jung_especifica['diagnostico']}\n" 
                                 f"  Pistas para Estudo: {cor_jung_especifica.get('referencias', '')}"
                             )
                             pdf.multi_cell(0, 5, text_jung_detail)
                        pdf.ln(2)
                    
                    pdf.set_font_size(14); pdf.cell(0, 10, "Camadas de Cores para Pintura", 0, 1); pdf.set_font_size(10)
                    pdf.multi_cell(0,5, "As imagens das camadas individuais podem ser baixadas diretamente da interface web (n√£o inclu√≠das neste PDF para simplifica√ß√£o).")

                    pdf_data = pdf.output(dest='S').encode('latin-1') # 'S' para string, latin-1 para bytes
                    
                    st.download_button(label="üì• Baixar Relat√≥rio PDF Completo", data=pdf_data,
                                       file_name=f"relatorio_completo_{uploaded_file.name}.pdf",
                                       mime="application/pdf", key="download_pdf_report_button")
            st.markdown('</div>', unsafe_allow_html=True) # Fecha a div do bot√£o de gerar PDF

    except UnidentifiedImageError:
        st.error("Erro ao abrir a imagem. O arquivo pode estar corrompido ou n√£o √© um formato de imagem suportado.")
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado durante o processamento: {e}")
        st.error("Detalhes t√©cnicos:")
        st.exception(e) 
else:
    st.warning("Por favor, carregue uma imagem para gerar a paleta e a tela.")
else:
if not uploaded_file :
st.info("üëà Ajuste as configura√ß√µes na barra lateral, carregue uma imagem e clique em 'Gerar Paleta e Tela'.")

                    
